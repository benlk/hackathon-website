#!/usr/bin/env ruby
 
# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

require 'compass'

Compass.add_project_configuration 'compass.rb'

compile 'assets/css/*' do
  filter :sass, Compass.sass_engine_options.merge(:syntax => item[:extension].to_sym)
  filter :relativize_paths, :type => :css
end

compile 'assets/js/*' do
  filter :erb
  filter :uglify_js if @config[:javascripts][:passthrough].include?(File.basename(item.identifier))
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
  	# https://github.com/chickenboot/vintageinvite/blob/master/Rules#L54-L68
    # mgutz: https://github.com/mgutz/nanoc3_blog/blob/master/Rules
    # item[:extension] returns 'html.erb' for multi-dotted filename
    ext = item[:extension].nil? ? nil : item[:extension].split('.').last

    if ext == 'erb'
      filter :erb
      filter :relativize_paths, :type => :html
    elsif ext == 'haml' || ext.nil?
      filter :haml
      filter :relativize_paths, :type => :html
    elsif ext == 'md' || ext == 'markdown'
      filter :erb
      filter :kramdown
      filter :relativize_paths, :type => :html
    #else
     # raise "Filter is not configured for #{item.identifier} in Rules file."
    end
    layout 'default'
  end
end

route 'assets/img/*' do
  #ignore images for now
end

route 'assets/js/*' do
  filename = File.basename(item.identifier)
  '/assets/' + filename + '.js' if @config[:javascripts][:passthrough].include?(filename)
end

route 'assets/css/*' do
  # flatten assets to assets/ similar to rails
  '/assets/' + File.basename(item.identifier) + '.css'
end

route '*' do
  if item[:extension] == 'css'
    # Write item with identifier /foo/ to /foo.css
    item.identifier.chop + '.css'
  elsif item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end
 
layout '*', :haml, :format => :html5
